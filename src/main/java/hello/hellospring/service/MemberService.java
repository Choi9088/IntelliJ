package hello.hellospring.service;import hello.hellospring.domain.Member;import hello.hellospring.repository.MemberRepository;import hello.hellospring.repository.MemoryMemberRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class MemberService {    //서비스를 만들기 위해 Repo가 필요하므로 가지고오기    private final MemberRepository memberRepository;    @Autowired    public MemberService(MemberRepository memberRepository) {        this.memberRepository = memberRepository;    }    /**     * 1. 회원가입     */    public Long join(Member member) { //같은 이름을 가진 회원은 가입이 불가함        //1. 초기코드        /*        Optional<Member> result = memberRepository.findByName(member.getName());        //command = option + V :Extract > Introduce Variable        result.ifPresent(m -> {//result변수에 해당하는 값이 존재한다면, 내부 로직을 실행한다.            throw new IllegalStateException("이미 존재하는 회원입니다.");        }); //ifPresent : Optional로 감쌌기때문에 사용 가능한 메서드        */        // 2. 또는,        // result.orElseGet() 도 사용가능(값이 있다면 꺼내고, 값이 없다면 안의 코드를 실행해!)        // 3. 최종Ver.        // Optional return값을 바로 사용해서 코드를 정리하면 아래와같이 작성 가능        validateDuplicateMember(member); //중복회원 검증 메소드        memberRepository.save(member); //memberRepository에 member변수로 들어온 값을 save()한다        return member.getId(); //코드 실행 후 member의 id를 반환한다.    }    private void validateDuplicateMember(Member member) {        memberRepository.findByName(member.getName()) //memberRepository에서 findByName을 해, 그 결과를 가지고                .ifPresent(m -> { //ifPresent를 실행해                    throw new IllegalStateException("이미 존재하는 회원입니다.");                });    }    /**     * 전체 회원 조회     */    public List<Member> findMembers() {        return memberRepository.findAll();    }    /**     * memberId를 이용해서 조회     */    public Optional<Member> findOne(Long memberId) {        return memberRepository.findById(memberId);    }}