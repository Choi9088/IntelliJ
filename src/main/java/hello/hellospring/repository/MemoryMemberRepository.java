package hello.hellospring.repository;import hello.hellospring.domain.Member;import java.util.*;//repository 구현체public class MemoryMemberRepository implements MemberRepository {    private static Map<Long, Member> store = new HashMap<>();    // 저장소 선언    // 실무에서는 동시성문제로인해 다른걸 사용하기도하지만, 지금은예제니까 HashMap 사용    private static long sequence = 0L; //키 값을 저장하기위한 변수선언    @Override    public Member save(Member member) {        member.setId(++sequence); //시퀀스값 증가시켜서 id에 set        store.put(member.getId(), member);        // member 에서 불러온(get) "name", 위에서 증가된 "시퀀스(id)"를 store에 저장(put)!        return member;    }    @Override    public Optional<Member> findById(Long id) {        return Optional.ofNullable(store.get(id));        //단순하게는 store 에서 id 를 get 하면 됨        //이 경우, null 반환될 가능성이 있으므로 optional객체의 ofNullable메서드로 감싸서 반환시켜준다        //ofNullable : null값을 허용한다.    }    @Override    public Optional<Member> findByName(String name) {        return store.values().stream() //stream으로 배열안의 요소를 반복적으로 실행                .filter(member -> member.getName().equals(name)) //입력된 name과 getName으로 가져온 name이 동일한지를 확인해서 반환해줌                .findAny(); //위에서 필터링해 찾은 결과를 반환한다    }    @Override    public List<Member> findAll() {        return new ArrayList<>(store.values()); //store에 저장되어있는 값을 배열로 반환함    }}