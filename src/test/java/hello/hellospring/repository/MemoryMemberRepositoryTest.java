package hello.hellospring.repository;import hello.hellospring.domain.Member;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import java.util.Optional;import static org.assertj.core.api.Assertions.*;public class MemoryMemberRepositoryTest {    //1. 테스트 할 클래스를 객체로 생성    MemoryMemberRepository repository = new MemoryMemberRepository();    @Test //    public void save() {        //1. 입력값을 "spring"으로 줌 (expected value)        Member member = new Member(); //이름을 저장하기위해 우선 도메인 객체 생성        member.setName("spring"); //생성한 객체에 setName()으로 "spring" 세팅        //2. 입력값을 repository에 저장 (actual value)        repository.save(member); //내가 입력한 "spring"을 save메소드로 repository에 저장        //3. 입력값과 저장된 값이 일치하는지 확인 (저장이 잘 되었는지 확인)        //repository 저장소에서 findId()를 이용해서 member의 Id를 get할거야(getId)        //optional에서 값을 꺼낼땐 get()을 사용        //get한 값은 result에 넣어줄거고        Member result = repository.findById(member.getId()).get();        //방법1.        //result : repository에서 꺼내온 값        //member : 내가 setName으로 지정해준 값        //이 두 값이 동일한지 비교해서 true/fauls로 출력        //하지만 위 코드로 작성하게되면 테스트의 이상유무를 직접 확인해야하는 번거로움이 있음        System.out.println("result = " + (result == member));        //방법2. 더 간편한 test 검증을 위해 assert기능을 이용해 해결가능        Assertions.assertEquals(member,result);        //방법3.        assertThat(member).isEqualTo(result);    }    @Test    public void findByName() {        //1. 회원2명 가입시킴(spring1, spring2)        Member member1 = new Member();        member1.setName("sprig1");        repository.save(member1);        Member member2 = new Member(); //shift fn f6으로 rename 가능        member2.setName("sprig2");        repository.save(member2);        //2. 저장된 값 중에 spring1을 찾아서 result에 넣어줘        Member result = repository.findByName("spring1").get();        //3. result에 넣어준 spring1이 member1에서 저장한 값이랑 동일한지 비교        assertThat(result).isEqualTo(member1);    }}