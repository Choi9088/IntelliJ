package hello.hellospring.service;import hello.hellospring.domain.Member;import hello.hellospring.repository.MemoryMemberRepository;import org.junit.jupiter.api.*;import static org.assertj.core.api.Assertions.*;import static org.junit.jupiter.api.Assertions.*;class MemberServiceTest {    //테스트하기위해 필요한 클래스 가지고오기    MemberService memberService;    //메모리를 리셋하기위해서 MemoryMemberRepository가져오기    MemoryMemberRepository memberRepository; //2. 만들어진 MemoryMemberRepository를 memeberRepository에 넣어줌    @BeforeEach    //테스트를 시작할 때 마다 repository를 새로 생성해준다    public void beforeEach() {        memberRepository = new MemoryMemberRepository();//1. MemoryMemberRepository를 만들고        memberService = new MemberService(memberRepository); //3. memberRepository변수를 사용해서 MemberService클래스의  memberRepository변수에 넣어줌    //4. 그렇게하면...같은 MemoryMemberRepository를 사용할 수 있음..........    }    @AfterEach    public void afterEach() {        memberRepository.clearStore();    }    @Test    void 회원가입() {        //given : 멤버 객체에 hello 라는 name값이 주어짐        Member member = new Member();        member.setName("spring");        //when : 주어진 멤버변수를 사용해 join메소드를 실행하고 return값을 saveId변수에 넣어줄거야        Long saveId = memberService.join(member);        //then        Member findMember = memberService.findOne(saveId).get();        assertThat(member.getName()).isEqualTo(findMember.getName()); //member에 set한 값이랑 service에서 찾아온 값이 동일한지 확인    }    @Test    public void 중복_회원_예외() {        //given        Member member1 = new Member();        member1.setName("spring");        Member member2 = new Member();        member2.setName("spring");        //when, then        memberService.join(member1);        //방법1. try-catch를 이용해서 예외 잡아내기/*        try {            memberService.join(member2);            fail(); //위 코드가실행된 다음 catch 로 안넘어가고 이후코드가 실행된다는건 그 자체가 실패이므로...        } catch (IllegalStateException e) {            //예외가 발생해서 catch로 넘어왔다면 성공이므로 공백으로 둬도 무방            //But,            //공백으로두면 잘 된게 맞나? 싶으니 예외발생시 출력되는 문구를 비교해보겠음            assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");        }*/        //방법2.        IllegalStateException e = assertThrows(IllegalStateException.class, () -> memberService.join(member2));        //위 코드에서 예외의 종류가 달라지면 테스트가 실패해버린다.        assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");    }    @Test    void findMembers() {    }    @Test    void findOne() {    }}